Collection Framework: why needed?
We cannot use regular array for below-mentioned reasons
i. Arrays are fixed in size which needs to be decleared at the beginning
ii. Only homogeneous data can be stored, like data of same type, int, char, String
Although we can overcome it by using object type of array //Object obj[]= new Object[10];
iii. While creating array, no data structures are used. SO there are no pre-defined methods.

Types of framework:
List, ArrayList, LinkedList, HashSet, LinkedHashSet

Benefits of collection framework:
i. Growable, size not fixed
ii. can store homogeneous as well as heterogeneous data types
iii. uses underlying data structure, so pre-defined or ready-made methods are available

Collection is an interface

Collection interface extends to following interfaces

List(I)=>
i. Insertion order preserved
ii. Duplicates are allowed

Classes implementing List(I)=> ArrayList, LinkedList, VectorList

If the data needs more of fetching or retrieving operations , use ArrrayList as the values can be get using index
If the dat needs frequent update (insertion/deletion), use LinkedList as sifting of elements donot happen
unlike ArrayList

Set(I)=>
i. Insertion order NOT preserved
ii. Duplicates are NOT allowed

Sorting & shuffling not possible as insertion order isnot maintained

Classes implementing Set(I)=> HashSet, LinkedHashSet

LinkedHashSet: Duplicates arenot allowed however, insertion order is maintained

Queue(I)=>
i. Used for prior to processing objects. Basically FIFO

Heterogeneous data NOT allowed

Classes implementing Queue(I)=> priorityQueue

Map(I) is independent of Collection (I) and isnot related in any way.
Map is used to store data in key-value pair
Duplicate keys not allowed, however values can be duplicate

Classes implementing Map(I)=> HashMap,HashTable

HashMap:
1. Underlying structure is hashtable
2.Insertion order not preserved
3. Duplicate keys not allowed, but duplicate values allowed
4. Null key allowed once, null value allowed multiple times

hashtable
1. Null not accepted in key & value
2.Insertion order is not maintained
